rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if isOwner();

      // The user document can only be updated using the admin SDK from Cloud Functions
      allow write: if false;

      match /vault/config {
        allow read, write: if false;
      }

      match /vault/status {
        allow read: if isOwner();

        allow write: if false;
      }

      match /config/preferences {
        allow read: if isOwner();

        allow write: if incomingData().size() <= 2 &&
          incomingData().keys().hasOnly([ "backgroundImageUrl", "dateFormatOptions" ]) &&
          (validateBackgroundImageUrl() || !("backgroundImageUrl" in incomingData())) &&
          (validateDateFormatOptions() || !("dateFormatOptions" in incomingData()));
      }

      function validateBackgroundImageUrl() {
        return incomingData().backgroundImageUrl is string &&
          incomingData().backgroundImageUrl != null &&
          incomingData().backgroundImageUrl == incomingData().backgroundImageUrl.trim() &&
          incomingData().backgroundImageUrl.size() <= 1024 &&
          (incomingData().backgroundImageUrl.matches("https://.+[.].{2,}/.*") || incomingData().backgroundImageUrl == "");
      }

      function validateDateFormatOptions() {
        return (incomingData().dateFormatOptions.keys().hasOnly([ "weekday", "era", "year", "month", "day", "hour", "minute", "second", "timeZoneName" ]) &&
          ((incomingData().dateFormatOptions.weekday is string &&
          [ incomingData().dateFormatOptions.weekday ].hasAny([ "long", "short", "narrow" ])) || !("weekday" in incomingData().dateFormatOptions)) &&
          ((incomingData().dateFormatOptions.era is string &&
          [ incomingData().dateFormatOptions.era ].hasAny([ "long", "short", "narrow" ]) || !("era" in incomingData().dateFormatOptions))) &&
          incomingData().dateFormatOptions.year is string &&
          [ incomingData().dateFormatOptions.year ].hasAny([ "numeric", "2-digit" ]) &&
          incomingData().dateFormatOptions.month is string &&
          [ incomingData().dateFormatOptions.month ].hasAny([ "numeric", "2-digit", "long", "short", "narrow" ]) &&
          incomingData().dateFormatOptions.day is string &&
          [ incomingData().dateFormatOptions.day ].hasAny([ "numeric", "2-digit" ]) &&
          incomingData().dateFormatOptions.hour is string &&
          [ incomingData().dateFormatOptions.hour ].hasAny([ "numeric", "2-digit" ]) &&
          incomingData().dateFormatOptions.minute is string &&
          [ incomingData().dateFormatOptions.minute ].hasAny([ "numeric", "2-digit" ]) &&
          ((incomingData().dateFormatOptions.second is string &&
          [ incomingData().dateFormatOptions.second ].hasAny([ "numeric", "2-digit" ])) || !("second" in incomingData().dateFormatOptions)) &&
          ((incomingData().dateFormatOptions.timeZoneName is string &&
          [ incomingData().dateFormatOptions.timeZoneName ].hasAny([ "long", "short", ])) || !("timeZoneName" in incomingData().dateFormatOptions))) ||
          incomingData().dateFormatOptions is string &&
          incomingData().dateFormatOptions == "default";
      }

      match /folders/{folderId} {
        allow get: if allowContentRead();

        // A user cannot access another user's root (only one folder is allowed to access if the parentId is the root)
        allow list: if allowContentRead() ||
          (existingData().shared && existingData().trashed == false && existingData().parentId != "root" && existingData().inVault == false);

        allow create: if allowContentCreate();

        allow update: if allowContentUpdate() &&
          incomingData().parentId != folderId;

        allow delete: if allowContentDelete();
      }

      match /files/{fileId} {
        allow read: if allowContentRead();

        allow create: if allowContentCreate();

        allow update: if allowContentUpdate() &&
          incomingData().size == existingData().size;

        allow delete: if allowContentDelete();
      }

      function existingData() {
        return resource.data;
      }

      function incomingData() {
        return request.resource.data;
      }

      function folderExists(folderId) {
        return exists(/databases/$(database)/documents/users/$(userId)/folders/$(folderId)) ||
          folderId == "root" ||
          folderId == "vault";
      }

      function allowContentRead() {
        return (isVaultUnlocked() || existingData().inVault == false) &&
          (isOwner() ||
          (existingData().shared && existingData().trashed == false) && existingData().inVault == false);
      }

      function allowContentCreate() {
        return isOwner() &&
          incomingData().size() == 9 &&
          isValidName(incomingData().name) &&
          folderExists(incomingData().parentId) &&
          incomingData().shared is bool &&
          incomingData().starred is bool &&
          incomingData().trashed is bool &&
          incomingData().inVault is bool &&
          (incomingData().inVault == (incomingData().parentId == "vault") ||
          (incomingData().parentId != "root" &&
          get(/databases/$(database)/documents/users/$(userId)/folders/$(incomingData().parentId)).data.inVault == incomingData().inVault)) &&
          ((incomingData().inVault && isVaultUnlocked()) || incomingData().inVault == false) &&
          incomingData().created is timestamp &&
          incomingData().created == request.time &&
          incomingData().updated is timestamp &&
          incomingData().updated == request.time &&
          incomingData().lastClientUpdateTime is timestamp;
      }

      function allowContentUpdate() {
        return isOwner() &&
          ((incomingData().inVault && isVaultUnlocked()) ||
          incomingData().inVault == false) &&
          incomingData().size() == existingData().size() &&
          isValidName(incomingData().name) &&
          incomingData().shared is bool &&
          incomingData().starred is bool &&
          incomingData().trashed is bool &&
          incomingData().inVault is bool &&
          (incomingData().inVault == (incomingData().parentId == "vault") ||
          (incomingData().parentId != "root" &&
          get(/databases/$(database)/documents/users/$(userId)/folders/$(incomingData().parentId)).data.inVault == incomingData().inVault)) &&
          ((incomingData().inVault == true && incomingData().trashed == false) ||
          (incomingData().inVault == false)) &&
          (folderExists(incomingData().parentId) || (existingData().trashed == true && incomingData().trashed == false)) &&
          incomingData().created == existingData().created &&
          incomingData().updated is timestamp &&
          incomingData().updated == request.time &&
          incomingData().lastClientUpdateTime is timestamp &&
          incomingData().lastClientUpdateTime > existingData().lastClientUpdateTime;
      }

      function allowContentDelete() {
        return isOwner() &&
          ((existingData().inVault && isVaultUnlocked()) || existingData().inVault == false) &&
          (existingData().trashed == true ||
          existingData().inVault == true); // Items in the vault are immediately deleted
      }

      function isValidName(name) {
        return name is string &&
          name != null &&
          name.size() > 0;
      }

      function isOwner() {
        return request.auth != null &&
          request.auth.uid == userId;
      }

      function isVaultUnlocked() {
        return !exists(/databases/$(database)/documents/users/$(userId)/vault/status) ||
          !get(/databases/$(database)/documents/users/$(userId)/vault/status).data.locked;
      }
    }
  }
}