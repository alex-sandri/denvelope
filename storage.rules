service firebase.storage {
  match /b/{bucket}/o {
    match /{userId}/{fileId} {
      allow read: if (isOwner() && (isVaultUnlocked() || !inVaultResource())) ||
        (resource.metadata.shared == "true" &&
        !inVaultResource());

      // If request.resource == null this is a delete operation
      allow write: if (request.resource != null && isOwner() &&
        (isVaultUnlocked() || !inVaultRequest()) &&
        "shared" in request.resource.metadata &&
        (request.resource.metadata.shared == "true" || request.resource.metadata.shared == "false") &&
        "inVault" in request.resource.metadata &&
        (request.resource.metadata.inVault == "true" || request.resource.metadata.inVault == "false")) ||
        (request.resource == null && fileId.split(".").size() > 0);

      function isOwner() {
        return request.auth != null &&
          request.auth.uid == userId;
      }

      function inVaultRequest() {
        return request.resource.metadata.inVault == "true";
      }

      function inVaultResource() {
        return "inVault" in resource.metadata && resource.metadata.inVault == "true";
      }

      function isVaultUnlocked() {
        return ("vaultLocked" in request.auth.token &&
        	!request.auth.token.vaultLocked) ||
          !("vaultLocked" in request.auth.token);
      }
    }
  }
}